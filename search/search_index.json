{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction <p>   <p>     A modern, end-to-end genetic circuit design desktop app   </p> <p>  </p> </p>","text":""},{"location":"#what-is-synergetica","title":"What is Synergetica?","text":"<p>Synergetica is a powerful desktop application for genetic circuit design. It provides an end-to-end workflow that allows you to design circuits, run simulations, and generate DNA sequences\u2014all within a single platform.</p>"},{"location":"#highlights","title":"Highlights","text":"<ul> <li>\ud83e\udde9 Design genetic circuits using either a node-based or code-based interface</li> <li>\ud83e\udd16 Simulate protein expression levels for your circuits interactively</li> <li>\ud83e\uddec Generate DNA sequences based on parameters determined through simulation</li> <li>\u2699\ufe0f Customize your circuits by adding genetic parts that suit your needs</li> <li>\ud83d\udd0c Work entirely offline, ensuring complete control and privacy</li> </ul>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>To get started, install both the backend Docker image and the desktop application.</p>"},{"location":"getting-started/installation/#backend-docker-image","title":"Backend Docker image","text":"<ol> <li> <p>Log in to Docker Hub (skip this step if you\u2019re already logged in): <pre><code>docker login -u &lt;USER_NAME&gt; -p &lt;PASSWORD&gt;\n</code></pre> Replace <code>&lt;USER_NAME&gt;</code> and <code>&lt;PASSWORD&gt;</code> with your Docker Hub credentials.</p> </li> <li> <p>Pull the Docker image: <pre><code>docker pull khokao/synergetica\n</code></pre></p> </li> </ol>"},{"location":"getting-started/installation/#desktop-app","title":"Desktop app","text":"<p>Download the installer for your operating system:</p> <ul> <li> macOS</li> <li> Windows</li> <li> Linux</li> </ul> <p>These are the primary installers. For all available installers, see the GitHub Releases page.</p> <p>Warning (macOS Users)</p> <p>On macOS, remove the quarantine attribute to allow Synergetica to launch. <pre><code>xattr -d com.apple.quarantine /Applications/Synergetica.app\n</code></pre></p> <p>Note</p> <p>If the Docker engine is running when you open the desktop app, the Docker container will automatically start and the API will launch on port <code>7007</code>.</p> <p>Tip</p> <p>Check the : icon at the bottom-right of the app screen to confirm that you\u2019re connected to the backend API.</p> <ul> <li> : Connected to the API</li> <li>  : Not connected to the API</li> </ul>"},{"location":"getting-started/tutorial/","title":"Tutorial","text":"<p>This tutorial demonstrates the entire workflow for a simple toggle switch circuit.</p> <p></p> <p>You will learn how to:</p> <ul> <li>Design a circuit using both node-based and code-based methods.</li> <li>Simulate the circuit and adjust parameters.</li> <li>Generate DNA sequences that match your desired parameters and export them.</li> </ul>"},{"location":"getting-started/tutorial/#1-designing-a-circuit","title":"1. Designing a circuit","text":""},{"location":"getting-started/tutorial/#build-a-single-chain","title":"Build a single chain","text":"<p>First, we'll build a single chain, a sequence of blocks.</p>"},{"location":"getting-started/tutorial/#drag-and-drop-a-block","title":"Drag and drop a block","text":"<p>At the top of the application window, you will see a palette containing various colored blocks. Drag a blue block (promoter) and drop it onto the main area.</p> <p></p> <p>Tip</p> <p>See the guide on circuit design to understand in more detail what each block means.</p>"},{"location":"getting-started/tutorial/#select-a-part","title":"Select a part","text":"<p>Click the newly placed blue block to open a selection panel where you can assign a specific biological part. For this tutorial, choose \"PameR\".</p> <p></p>"},{"location":"getting-started/tutorial/#connect-more-blocks","title":"Connect more blocks","text":"<p>When you drag a new block and bring it near an already existing block, the blocks will automatically connect to each other.</p> <p></p> <ul> <li>Drag a green block (protein) near the blue block and drop it to connect them.</li> <li>Drag a red block (terminator) near the green block and drop it to connect them.</li> <li>Select \"AmtR\" as the part for the green block and \"L3S3P31\" for the red block.</li> </ul> <p>You have now created a single chain of three blocks: a promoter, a protein, and a terminator.</p> <p></p> <p>Note</p> <p>A \"chain\" is a sequence of promoters, proteins, and a terminator.</p>"},{"location":"getting-started/tutorial/#build-another-chain-with-dsl","title":"Build another chain with DSL","text":"<p>Circuits can also be designed using the Synergetica DSL.</p> <p>The DSL editor is accessible by clicking the sidebar toggle on the left side of the application.</p> <p></p>"},{"location":"getting-started/tutorial/#check-the-existing-code","title":"Check the existing code","text":"<p>The following code should already be present in the coding palette. It represents the chain that was just constructed.</p> Circuit YAML<pre><code>- chain:\n  - type: Promoter\n    name: PameR\n  - type: Protein\n    name: AmtR\n  - type: Terminator\n    name: L3S3P31\n</code></pre> <p>Note</p> <p>The node-based editor and the code-based editor are always synchronized.</p>"},{"location":"getting-started/tutorial/#copy-and-paste","title":"Copy and paste","text":"<p>Copy the code of the existing chain and paste it immediately afterward. The same chain will then appear in the graphical view.</p> <p></p>"},{"location":"getting-started/tutorial/#rename-parts","title":"Rename parts","text":"<p>Change the names of two parts from \"PameR\" to \"PamtR\" and from \"AmtR\" to \"AmeR\" (see highlighted lines below):</p> Circuit YAML<pre><code>- chain:\n  - type: Promoter\n    name: PameR\n  - type: Protein\n    name: AmtR\n  - type: Terminator\n    name: L3S3P31\n- chain:\n  - type: Promoter\n    name: PamtR\n  - type: Protein\n    name: AmeR\n  - type: Terminator\n    name: L3S3P31\n</code></pre> <p>After that, the blocks in the graphical view will automatically update, and blue arrows will appear to indicate the interactions between the blocks.</p> <p></p> <p>You have now finished building the toggle switch circuit! </p> <p>Note</p> <p>If there is an interaction between a promoter and a protein in the circuit, an arrow will automatically appear to illustrate that interaction. The arrow starts at the protein and ends at the promoter.</p> <ul> <li>: Activation (the protein increases the expression of the connected promoter)</li> <li>: Repression (the protein decreases the expression of the connected promoter)</li> </ul> <p>In the part selection screen, you can see which parts interact with each other.</p>"},{"location":"getting-started/tutorial/#2-running-a-simulation","title":"2. Running a simulation","text":"<p>With your toggle switch circuit in place, it\u2019s time to see how it behaves over time.</p>"},{"location":"getting-started/tutorial/#start-simulation","title":"Start simulation","text":"<p>To start the simulation, click the \"Start\" button in the lower right corner of the application. This will automatically open the simulation sidebar from the right side and display the results.</p> <p>The graph shows how the protein (green block) concentration changes over time in this circuit.</p> <p></p> <p>Tip</p> <p>See the guide on genetic simulation to know more about what the graphs and slider values mean biologically.</p>"},{"location":"getting-started/tutorial/#adjust-parameters","title":"Adjust parameters","text":"<p>Two sliders are displayed, each corresponding to a protein in the circuit and allowing you to adjust the translation intensity.</p> <p>Try moving each slider and notice that adjusting one slider affects both curves.</p> <p>Adjust the parameters to achieve the protein concentration you desire.</p> <p></p>"},{"location":"getting-started/tutorial/#3-generating-sequences","title":"3. Generating sequences","text":"<p>Once the parameters have been adjusted, the last step is to generate the specific DNA sequences to realize your chosen parameters.</p>"},{"location":"getting-started/tutorial/#start-sequence-generation","title":"Start sequence generation","text":"<p>Click the \"Run\" button in the Generation section at the bottom right of the app to start the sequence generation process.</p> <p>Synergetica will create optimized DNA sequences corresponding to the circuit parameters you set.</p> <p></p>"},{"location":"getting-started/tutorial/#view-the-results","title":"View the results","text":"<p>Once generation completes, you can view the results by clicking the \"Result\" button.</p> <p>The generated DNA sequences corresponding to each chain will be displayed in the result window.</p> <p></p> <p>Tip</p> <p>See the guide on sequence generation to understand the generation process in more detail.</p>"},{"location":"getting-started/tutorial/#export-to-fasta","title":"Export to FASTA","text":"<p>By clicking the \"Export FASTA\" button, you can save these sequences locally in FASTA format.</p> Example FASTA<pre><code>&gt; mighty-bobcats-pay\nGATAGTGACAAACTTGACAACTCATCACTTCCTAGGTATAATGCTAGCACCTCTGAGCGATGTGTGCACGCACCCATGGCAGGCGCAGTTGGTCGTCCGCGTCGTAGTGCACCGCGTCGTGCAGGTAAAAATCCGCGTGAAGAAATTCTGGATGCAAGCGCAGAACTGTTTACCCGTCAGGGTTTTGCAACCACCAGTACCCATCAGATTGCAGATGCAGTTGGTATTCGTCAGGCAAGCCTGTATTATCATTTTCCGAGCAAAACCGAAATCTTTCTGACCCTGCTGAAAAGCACCGTTGAACCGAGCACCGTTCTGGCAGAAGATCTGAGCACCCTGGATGCAGGTCCGGAAATGCGTCTGTGGGCAATTGTTGCAAGCGAAGTTCGTCTGCTGCTGAGCACCAAATGGAATGTTGGTCGTCTGTATCAGCTGCCGATTGTTGGTAGCGAAGAATTTGCAGAATATCATAGCCAGCGTGAAGCACTGACCAATGTTTTTCGTGATCTGGCAACCGAAATTGTTGGTGATGATCCGCGTGCAGAACTGCCGTTTCATATTACCATGAGCGTTATTGAAATGCGTCGCAATGATGGTAAAATTCCGAGTCCGCTGAGCGCAGATAGCCTGCCGGAAACCGCAATTATGCTGGCAGATGCAAGCCTGGCAGTTCTGGGTGCACCGCTGCCTGCAGATCGTGTTGAAAAAACCCTGGAACTGATTAAACAGGCAGATGCAAAATAACCAATTATTGAACACCCTAACGGGTGTTTTTTTTTTTTTGGTCTACC\n&gt; cute-camels-wish\nGATTCGTTACCAATTGACAGTTTCTATCGATCTATAGATAATGCTAGCGAGCCTCTATTCAAGCATTCTACTATCATGAACAAAACCATTGATCAGGTGCGTAAAGGTGATCGTAAAAGCGATCTGCCGGTTCGTCGTCGTCCGCGTCGTAGTGCCGAAGAAACCCGTCGTGATATTCTGGCAAAAGCCGAAGAACTGTTTCGTGAACGTGGTTTTAATGCAGTTGCCATTGCAGATATTGCAAGCGCACTGAATATGAGTCCGGCAAATGTGTTTAAACATTTTAGCAGCAAAAACGCACTGGTTGATGCAATTGGTTTTGGTCAGATTGGTGTTTTTGAACGTCAGATTTGTCCGCTGGATAAAAGCCATGCACCGCTGGATCGTCTGCGTCATCTGGCACGTAATCTGATGGAACAGCATCATCAGGATCATTTCAAACACATACGGGTTTTTATTCAGATCCTGATGACCGCCAAACAGGATATGAAATGTGGCGATTATTACAAAAGCGTGATTGCAAAACTGCTGGCCGAAATTATTCGTGATGGTGTTGAAGCAGGTCTGTATATTGCAACCGATATTCCGGTTCTGGCAGAAACCGTTCTGCATGCACTGACCAGCGTTATTCATCCGGTTCTGATTGCACAAGAAGATATTGGTAATCTGGCAACCCGTTGTGATCAGCTGGTTGATCTGATTGATGCAGGTCTGCGTAATCCGCTGGCAAAATAACCAATTATTGAACACCCTAACGGGTGTTTTTTTTTTTTTGGTCTACC\n</code></pre> <p></p> <p>Congratulations!</p> <p>You\u2019ve successfully designed, simulated, and generated sequences for a toggle switch using Synergetica. If you\u2019d like to learn more, check out the Guides section.</p> <p>Happy designing!</p>"},{"location":"guides/circuit-design/","title":"Circuit design","text":"<p>This page explains how to create a genetic circuit with Synergetica.</p>"},{"location":"guides/circuit-design/#block-types","title":"Block types","text":""},{"location":"guides/circuit-design/#promoter","title":"Promoter","text":"<p>A promoter controls the timing and strength of transcription for the downstream DNA sequence. Specific proteins can bind to it to either activate or repress transcription.</p> <p></p>"},{"location":"guides/circuit-design/#protein","title":"Protein","text":"<p>A protein is a functional molecule produced within a cell. In living organisms, proteins are essential components in various biological processes.</p> <p></p>"},{"location":"guides/circuit-design/#terminator","title":"Terminator","text":"<p>A terminator marks the end of transcription and also plays a role in regulating the degradation rate of the resulting transcript.</p> <p>Info</p> <p>When multiple identical terminators are present, homologous recombination may occur, potentially altering the DNA sequence. To prevent this, Synergetica offers multiple terminator variants.</p>"},{"location":"guides/circuit-design/#building-circuits","title":"Building circuits","text":""},{"location":"guides/circuit-design/#method-1-node-based-design","title":"Method 1: Node-based design","text":"<p>Design a circuit using the graphical interface.</p>"},{"location":"guides/circuit-design/#placing-a-block","title":"Placing a block","text":"<p>Drag any block from the block placement area at the top of the window and drop it onto the main area.</p> <p></p>"},{"location":"guides/circuit-design/#deleting-a-block","title":"Deleting a block","text":"<p>There are two ways to delete a block.</p> <ol> <li>Select the block and press the Backspace key.</li> <li>Click the \"\" button and select \"Delete\".</li> </ol>"},{"location":"guides/circuit-design/#connecting-blocks","title":"Connecting blocks","text":"<p>When you drag a new block near an existing one, they will automatically connect.</p> <p></p> <p>Note</p> <p>In Synergetica, this connected unit of blocks is called a chain.</p>"},{"location":"guides/circuit-design/#disconnecting-blocks","title":"Disconnecting blocks","text":"<p>When you hover the mouse cursor over the edge between blocks, an  button will appear. Clicking this button disconnects the blocks.</p> <p></p> <p>Alternatively, you can also drag the block away from the chain to disconnect it.</p> <p></p>"},{"location":"guides/circuit-design/#method-2-code-based-design","title":"Method 2: Code-based design","text":"<p>Circuits can also be designed using the Synergetica DSL, a custom domain-specific language developed exclusively for genetic circuit design.</p>"},{"location":"guides/circuit-design/#basic-structure-of-the-synergetica-dsl","title":"Basic structure of the Synergetica DSL","text":"<ul> <li>The code is written in YAML format.</li> <li>It is defined as an array of objects, each with a single key: <code>chain</code>.</li> <li>Each <code>chain</code> is an array of elements, where each element contains:<ul> <li><code>type</code>: the block type (<code>Promoter</code>, <code>Protein</code>, or <code>Terminator</code>)</li> <li><code>name</code>: the part name</li> </ul> </li> </ul> Example YAML<pre><code>- chain:\n  - type: Promoter\n    name: PamtR\n  - type: Protein\n    name: BM3R1\n  - type: Terminator\n    name: L3S3P31\n- chain:\n  - type: Promoter\n    name: Pbm3r1\n  - type: Protein\n    name: AmtR\n  - type: Terminator\n    name: L3S3P11\n</code></pre> <p>Tip</p> <p>Because the node-based editor and the code-based editor are always synchronized, you can switch between them at any time.</p> <p>Info</p> <p>When the YAML-based circuit is loaded into the node-based editor, each chain is arranged vertically, and the blocks in each chain are arranged from left to right.</p> <p></p>"},{"location":"guides/circuit-design/#importing-and-exporting-yaml-files","title":"Importing and exporting YAML files","text":"<p>To import or export a YAML file, click the  and  buttons located in the top bar of the code palette.</p> <p>Tip</p> <p>You can save and share your circuit using a YAML file.</p>"},{"location":"guides/circuit-design/#completing-valid-circuits","title":"Completing valid circuits","text":"<p>Circuits are automatically validated for biological correctness. The validation results are displayed at the bottom of the code palette, and an icon indicating the result is shown in the node-based editor.</p> <p>Valid </p> <p>Invalid </p> <p>Warning</p> <p>If the designed circuit is invalid, you cannot run a simulation.</p> <p>Here are the basic rules for a valid circuit.</p> <ul> <li>Chain rule: A chain must consist of one or more promoters, followed by one or more proteins, and end with exactly one terminator.</li> <li>Block rule: The part name must be included in the list of parts for each block type.</li> </ul> Valid circuit examples <ul> <li> <p>Minimum valid circuit </p> </li> <li> <p>Multiple proteins are allowed </p> </li> <li> <p>Multiple promoters are allowed </p> </li> </ul> Invalid circuit examples <ul> <li> <p>A chain must start with promoter(s) </p> </li> <li> <p>Protein(s) must follow promoter(s) before a terminator </p> </li> <li> <p>Empty blocks are not allowed </p> </li> <li> <p>Protein(s) must follow promoter(s) before a terminator </p> </li> </ul>"},{"location":"guides/genetic-simulation/","title":"Genetic simulation","text":"<p>This page explains how to start a simulation and adjust its parameters.</p>"},{"location":"guides/genetic-simulation/#starting-a-simulation","title":"Starting a simulation","text":"<p>After designing a valid circuit, you can begin the simulation by clicking the \"Start\" button in the bottom-right corner. Once the simulation starts, a sidebar opens on the right. It displays a results graph and a set of adjustable sliders.</p> <p></p> <p>Note</p> <p>To start the simulation, your circuit must be valid (  ) and the API must be connected (  ).</p> <p>Note</p> <p>Whenever you modify the circuit or click the \"Reset\" button, the simulation results are automatically cleared.</p>"},{"location":"guides/genetic-simulation/#adjusting-parameters","title":"Adjusting parameters","text":"<p>The graph shows how protein concentrations change over time within your circuit. You can adjust the translation initiation rate (TIR) for each protein block using the sliders.</p> <p>Each slider has a colored dot beside its label. Find the protein block in your circuit with the same outline color to identify which slider controls that block.</p> <p>Tip</p> <p>You can also type values directly into the numeric fields beside each slider.</p> <p>Note</p> <p>Although every protein block has its own slider, blocks that share the same protein name are merged into a single curve on the graph. This is because Synergetica computes the total expression of each protein in the cell.</p> <p>If you have multiple blocks of the same protein, they are labeled with a number (e.g., BM3R1 [1], BM3R1 [2]). The graph is drawn using the color assigned to the first block ([1]).</p> <p></p>"},{"location":"guides/genetic-simulation/#technical-details","title":"Technical details","text":"<p>Synergetica simulates how protein concentrations change over time for every protein in a designed circuit. When you click the \"Start\" button, it automatically constructs a set of differential equations based on the circuit\u2019s structure and then uses Euler\u2019s method to compute an approximate solution.</p>"},{"location":"guides/genetic-simulation/#formulation","title":"Formulation","text":"<p>Synergetica creates differential equations for each protein block to model two biological events: transcription and translation. These equations and their parameters are based on Cello (Nielsen, Alec AK, et al. Science, 2016), a leading study in genetic circuit design.</p> Biological Event Example Equation Transcription \\(\\frac{d[ProtX_m]}{dt} = PCN\\cdot \\zeta \\cdot  \\left\\{Y_{\\min} + \\left(Y_{\\max} - Y_{\\min}\\right) \\cdot \\frac{K^n}{K^n + [ProtX_m]^n}\\right\\} - D_{mRNA}\\cdot[ProtX_m]\\) Translation \\(\\frac{d[ProtX_p]}{dt} = E_{RPU}\\cdot \\frac{TIR}{TIRb} - D_{ProtX_p}\\cdot[ProtX_p]\\) <ul> <li>[\\(ProtX_m\\)] represents the mRNA concentration of Protein X.</li> <li>[\\(ProtX_p\\)] represents the protein concentration of Protein X.</li> </ul> <p>The table below briefly describes each parameter.</p> Parameter Description \\(PCN\\) Plasmid copy number (copies/cell). Default is 15. \\(\\zeta\\) Translate coefficient from RPU to mRNA (units: [mRNA]/(min\u00b7RPU)). Default is 0.025. \\(D_{mRNA}\\) Degradation rate of mRNA ([1/s]), shared by all parts.  Default is 0.025. \\(E_{RPU}\\) Translation efficiency coefficient. Default is 0.02. \\(TIR\\) Translation initiation rate. Adjustable via the slider. <p>Note</p> <p>For details on other parameters, see the guide on parts customization.</p> <p>Tip</p> <p>For more details on the simulation\u2019s underlying logic, see the implementation code.</p>"},{"location":"guides/parts-customization/","title":"Parts customization","text":"<p>This page explains how to customize the genetic parts in your database.</p> <p></p> <p>The following five buttons let you manage the parts in your database:</p> <ul> <li> : Add a new, unregistered part</li> <li> : Delete a part from your collection</li> <li> : Edit the parameters of a registered part</li> <li> : Import a complete collection of parts</li> <li> : Export your current collection of parts</li> </ul>"},{"location":"guides/parts-customization/#add-parts","title":"Add parts","text":"<p>Click the  button to open a form for entering details about a new part. After filling out the form, click \"Save\" to add the part to your database.</p> <p>Tip</p> <p>By clicking \"Fill form with existing part\", you can select an existing part and automatically load its information into the form. This is useful when creating a new part that closely resembles an existing one.</p>"},{"location":"guides/parts-customization/#common-parameters","title":"Common parameters","text":"<p>The following parameters apply to all part types:</p> Parameter Description Name The part\u2019s name. It must be unique within the database. Description A brief explanation of the part. Category The part's category (Promoter, Protein, Terminator). DNA sequence The DNA sequence for the part, containing only the letters A, T, G, and C."},{"location":"guides/parts-customization/#promoter-specific-parameters","title":"Promoter-specific parameters","text":"<p>Promoters have additional parameters:</p> Parameter Description Ydef The expression strength of the gate in the absence of transcriptional regulators (in [RPU]). For repressive promoters, this value is the same as Ymax. For activating promoters, it is the same as Ymin."},{"location":"guides/parts-customization/#interaction-parameters","title":"Interaction parameters","text":"<p>If a promoter interacts with a specific protein, configure the interaction in the \"Controlled By\" section:</p> Parameter Description name The name of the protein (must already exist in the database). type The type of interaction (Repression or Activation). Ymax The maximum expression rate of the gate (in [RPU]). Ymin The minimum expression rate of the gate (in [RPU]), indicating leakage expression. K The Michaelis\u2013Menten constant, i.e., the protein expression level at which the gate\u2019s expression is half of its maximum (in [RPU]). n The Hill coefficient of the gate."},{"location":"guides/parts-customization/#protein-specific-parameters","title":"Protein-specific parameters","text":"<p>Proteins have additional parameters:</p> Parameter Description Dp The protein degradation rate (in [RPU]). The default values are theoretical, calculated from the steady-state condition when the gate\u2019s expression is at its maximum. Whenever possible, use experimentally measured values. TIRb The Translation Initiation Rate measured in baseline experiments to determine parameter values. This represents RBS strength. For more details on the translation initiation rate, see H. M. Salis, C. A. Voigt, Nat. Biotech. 2009 <p>Note</p> <p>If any parameters are invalid, an error message will appear. Check the message and correct your input accordingly.</p>"},{"location":"guides/parts-customization/#delete-parts","title":"Delete parts","text":"<p>Click the  button to see a list of registered parts. Select the part you want to remove, then confirm the deletion.</p>"},{"location":"guides/parts-customization/#edit-parts","title":"Edit parts","text":"<p>Click the  button to see a list of registered parts. Select the part you want to edit, then modify its settings in the same type of form used for adding parts.</p>"},{"location":"guides/parts-customization/#import-parts-collection","title":"Import parts collection","text":"<p>Click the  button to import a collection of parts in bulk. The file you import must follow the same format as the export file described below.</p> <p>Warning</p> <p>This action overwrites your existing parts database.</p>"},{"location":"guides/parts-customization/#export-parts-collection","title":"Export parts collection","text":"<p>Click the  button to export your current parts database as a JSON file.</p> <p>Note</p> <p>The parts database is reset each time the application is restarted. To avoid losing your data, export it beforehand. You can then restore it later by importing the saved JSON file.</p>"},{"location":"guides/sequence-generation/","title":"Sequence generation","text":"<p>This page explains how to generate sequences and export them in FASTA format.</p>"},{"location":"guides/sequence-generation/#generating-sequences","title":"Generating sequences","text":"<p>After you have designed your circuit and adjusted the desired parameters in the simulation section, you can generate optimized DNA sequences based on those parameters.</p> <p>To start the generation process, click the \"Run\" button in the Generation section.</p> <p></p> <p>Tip</p> <p>During generation, a popup will appear in the bottom-right corner of the screen. If you want to stop the process, click the \"Cancel\" button inside that popup.</p> <p>Info</p> <p>Generation time may vary depending on the number of proteins in your circuit and your machine\u2019s specifications.</p>"},{"location":"guides/sequence-generation/#viewing-results","title":"Viewing results","text":"<p>Once sequence generation is complete, the \"Result\" button becomes available. Clicking it will open a window displaying your results, as shown below.</p> <p></p> <p>On the left side of the window, you can see your circuit along with the parameters you specified. On the right side, a table displays the resulting sequences. Each chain is assigned a random ID, which appears in both the circuit and the table.</p>"},{"location":"guides/sequence-generation/#exporting-a-fasta-file","title":"Exporting a FASTA file","text":"<p>To export generated sequences as a FASTA file, click the \"Export FASTA\" button.</p> <p>In the FASTA file, the names of the sequences are set to their corresponding chain IDs. For example, the exported file may look like this:</p> Example FASTA<pre><code>&gt; easy-shirts-sleep\nGATTCGTTACCAATTGACAGTTTCTATCGATCTATAGATAATGCTAGCGGTGAACATTGAAGTGAACCCTCCTTGATGGAAAGCACCCCGACCAAACAGAAAGCAATTTTTAGCGCAAGCCTGCTGCTGTTTGCAGAACGTGGTTTTGATGCAACCACCATGCCGATGATTGCAGAAAATGCAAAAGTTGGTGCAGGCACCATTTATCGCTATTTCAAAAACAAAGAAAGCCTGGTGAACGAACTGTTTCAGCAGCATGTTAATGAATTTCTGCAGTGTATTGAAAGCGGTCTGGCAAATGAACGTGATGGTTATCGTGATGGCTTTCATCACATTTTTGAAGGTATGGTGACCTTTACCAAAAATCATCCGCGTGCACTGGGTTTTATCAAAACCCATAGCCAGGGCACCTTTCTGACCGAAGAAAGCCGTCTGGCATATCAGAAACTGGTTGAATTTGTGTGCACCTTTTTTCGTGAAGGTCAGAAACAGGGTGTGATTCGTAATCTGCCGGAAAATGCACTGATTGCAATTCTGTTTGGCAGCTTTATGGAAGTGTATGAAATGATCGAGAACGATTATCTGAGCCTGACCGATGAACTGCTGACCGGTGTTGAAGAAAGCCTGTGGGCAGCACTGAGCCGTCAGAGCTAACTCGGTACCAAAGACGAACAATAAGACGCTGAAAAGCGTCTTTTTTCGTTTTGGTCC\n&gt; itchy-windows-love\nGATAGTGACAAACTTGACAACTCATCACTTCCTAGGTATAATGCTAGCTGATACTCTCCCGTGCTTCGGTATCGTATGGCAGGCGCAGTTGGTCGTCCGCGTCGTAGTGCACCGCGTCGTGCAGGTAAAAATCCGCGTGAAGAAATTCTGGATGCAAGCGCAGAACTGTTTACCCGTCAGGGTTTTGCAACCACCAGTACCCATCAGATTGCAGATGCAGTTGGTATTCGTCAGGCAAGCCTGTATTATCATTTTCCGAGCAAAACCGAAATCTTTCTGACCCTGCTGAAAAGCACCGTTGAACCGAGCACCGTTCTGGCAGAAGATCTGAGCACCCTGGATGCAGGTCCGGAAATGCGTCTGTGGGCAATTGTTGCAAGCGAAGTTCGTCTGCTGCTGAGCACCAAATGGAATGTTGGTCGTCTGTATCAGCTGCCGATTGTTGGTAGCGAAGAATTTGCAGAATATCATAGCCAGCGTGAAGCACTGACCAATGTTTTTCGTGATCTGGCAACCGAAATTGTTGGTGATGATCCGCGTGCAGAACTGCCGTTTCATATTACCATGAGCGTTATTGAAATGCGTCGCAATGATGGTAAAATTCCGAGTCCGCTGAGCGCAGATAGCCTGCCGGAAACCGCAATTATGCTGGCAGATGCAAGCCTGGCAGTTCTGGGTGCACCGCTGCCTGCAGATCGTGTTGAAAAAACCCTGGAACTGATTAAACAGGCAGATGCAAAATAACCAATTATTGAACACCCTTCGGGGTGTTTTTTTGTTTCTGGTCTACC\n</code></pre>"},{"location":"guides/sequence-generation/#technical-details","title":"Technical details","text":""},{"location":"guides/sequence-generation/#generated-sequence","title":"Generated sequence","text":"<p>Synergetica generates ribosome binding sites (RBS) sequences according to the parameters specified in the simulation section. Because the RBS sequence regulates the translation rate of each downstream protein, it is inserted directly before the coding region for that protein. As a result, each chain\u2019s final sequence is formed by concatenating all blocks, with an RBS placed immediately before every protein.</p> <p></p>"},{"location":"guides/sequence-generation/#generation-algorithm","title":"Generation algorithm","text":"<p>In Synergetica, RBS sequences are optimized using a genetic algorithm. During optimization, we employ a prediction model that estimates the translation initiation rate (TIR) based on each RBS sequence.</p> <p>Info</p> <p>For more detailed information on training the prediction model, see the GitHub README.</p>"}]}